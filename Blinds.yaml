substitutions:
  name_rus: Спальня
  name_eng: Bedroom Blinds
  device_id: bedroom_blinds
  ip_address: 192.168.100.111
  power_save_mode: none
  # device_id: 

  total_steps: '60000'
  open_time_ms: '57000'
  ratio: '0.95'           ### '${open_time_ms} / ${total_steps}'

esphome:
  name: bedroom_blinds
  platform: ESP8266
  board: d1_mini

  on_boot:
      priority: -10
      then:
        - lambda: |-
            if (id(end_stop_down).state == true) {
              id(my_stepper).current_position = ${total_steps};
              id(my_stepper).set_target(id(my_stepper).current_position);
              id(last_dir_was_opening) = false;
            }

<<: !include _common_wifi.yaml

# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password
#   fast_connect: true
#   manual_ip:
#     static_ip: ${ip_address}
#     gateway: 192.168.100.1
#     subnet: 255.255.255.0
#     dns1: 86.57.160.65
#     dns2: 86.57.160.66
#   power_save_mode: ${power_save_mode}
#   ap:
#     ssid: ${name_eng}
#     password: !secret ap_wifi_password

# captive_portal:

# ota:
#   password: !secret ota_password

logger:
  level: DEBUG    # DEBUG INFO NONE
  baud_rate: 0    # no_serial:

api:
  services:
    - service: control_blind
      variables:
        target: int
      then:
        - lambda: |-
            id(my_stepper).set_target(target);
            id(blinds).position = 1 - (target / ${total_steps});

    - service: control_stepper
      variables:
        target: int
      then:
        - lambda: |-
            id(my_stepper).set_target(target);
            id(blinds).position = 1 - (target / ${total_steps});
            id(blind_target) = 1 - (target / ${total_steps});

globals:

  - id: blind_target
    type: float
    initial_value: '1'

  - id: stepper_is_stoped
    type: bool
    initial_value: "true"

  - id: last_dir_was_opening
    type: bool
    initial_value: "true"

stepper:
 
  - platform: a4988
    id: my_stepper
    step_pin: 13
    dir_pin: 15
    sleep_pin: 12
    max_speed: 1200 steps/s
    acceleration: 900
    deceleration: 900

cover:
  - platform: template
    name: "${name_rus} Шторы"
    id: blinds
    device_class: blind

    open_action:

      - lambda: |-
          id(my_stepper).set_target(0);
          id(stepper_is_stoped) = false;
          id(last_dir_was_opening) = true;
      - delay: !lambda 'return id(my_stepper).current_position * ${ratio} + 1500;'
               # (57 000 ms / 60 000 steps = 0.95    1500 ms additional delay )
      - lambda: id(stepper_is_stoped) = true;

    close_action:

      - lambda: |-
          id(my_stepper).set_target(${total_steps});
          id(stepper_is_stoped) = false;
          id(last_dir_was_opening) = false;
      - delay: !lambda 'return 58500 - id(my_stepper).current_position * ${ratio};'
               # (57 000 ms / 60 00 steps = 0.95    1500 ms additional delay )
      - lambda: id(stepper_is_stoped) = true;

    stop_action:
      
      - lambda: |-
          id(my_stepper).set_target(id(my_stepper).current_position);
          id(blinds).position = 1 - (float(float(id(my_stepper).current_position) / (${total_steps})));
          id(stepper_is_stoped) = true;

    position_action:
      - lambda: |-
          id(my_stepper).set_target(${total_steps} * (1 - pos));
          id(stepper_is_stoped) = false;
          if(pos > id(blind_target)){
            id(last_dir_was_opening) = true;
          } else {
            id(last_dir_was_opening) = false;
          }

      - delay: !lambda |-
            if(pos > id(blind_target)){
              return id(my_stepper).current_position * ${ratio} + 1500;
            } else {
              return 58500 - id(my_stepper).current_position * ${ratio};
            }
      - lambda: id(stepper_is_stoped) = true;

    optimistic: true
    assumed_state: true
    has_position: true

sensor:

  - platform: wifi_signal
    name: "${name_eng} WiFi"
    update_interval: 900s

  - platform: adc
    pin: VCC
    name: "${name_eng} Battery"
    filters:
      - offset: 0.36
    update_interval: 900s

  - platform: uptime
    name: "${name_eng} uptime"
    filters:
      - lambda: return x / 3600.0;
    unit_of_measurement: hours
    update_interval: 900s

binary_sensor:

  - platform: status
    name: ${name_eng} Status

  - platform: gpio    # Кнопка открытие - стоп - закрыти шторы
    pin: 16
    name: "${name_eng} button"
    internal: true
    # filters:
    on_click:
      then:
        - script.execute: script_open_stop_close

  - platform: gpio    # Штора поднялась вверх до конца
    pin:
       number: 4
       mode: INPUT_PULLUP
       inverted: true
    name: "${name_eng} end_stop_up"
    id: end_stop_up
    internal: true
    on_press:
      then:
      
        - lambda: |-
            id(my_stepper).current_position = 0;
            id(my_stepper).set_target(id(my_stepper).current_position);
            id(blinds).position = 1;
            id(stepper_is_stoped) = true;
            id(last_dir_was_opening) = true;

  - platform: gpio    # Штора опустилась вниз до конца
    pin:
       number: 14
       mode: INPUT_PULLUP
       inverted: true
    name: "${name_eng} end_stop_down"
    id: end_stop_down
    internal: true
    on_press:
      then:

        - lambda: |-
            id(my_stepper).current_position = ${total_steps};
            id(my_stepper).set_target(id(my_stepper).current_position);
            id(blinds).position = 0;
            id(stepper_is_stoped) = true;
            id(last_dir_was_opening) = false;

  - platform: gpio    # Датчик открытия окна
    pin:
       number: 5
       mode: INPUT_PULLUP
      # inverted: true
    name: "${name_rus} окно"
    device_class: window

text_sensor:

  - platform: wifi_info
    ip_address:
      name: ${name_eng} IP Address
      icon: mdi:ip-network

switch:

  - platform: template    # Свитч для упрощения внешнего управления шторой 
    name: "${name_eng} switch"
    id: blinds_switch
    turn_on_action:
      - script.execute: script_open_stop_close


script:

  - id: script_open_stop_close
    then:
      - lambda: |-
          if (id(stepper_is_stoped) == true) {
            //blinds is stopped
            if (id(last_dir_was_opening) == true) {
              id(blinds).close();
            } else {
              id(blinds).open();
            }
          } else {
            //blinds is moving
            id(blinds).stop();
          }
